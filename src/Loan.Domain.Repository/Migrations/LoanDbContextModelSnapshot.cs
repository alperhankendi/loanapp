// <auto-generated />
using System;
using Loan.Domain.Repository.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Loan.Domain.Repository.Migrations
{
    [DbContext(typeof(LoanDbContext))]
    partial class LoanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Loan.Domain.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("Loan.Domain.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Loan.Domain.LoanApplication", b =>
                {
                    b.OwnsOne("Loan.Domain.Customer", "Customer", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Birthdate")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<decimal?>("MonthlyIncome")
                                .HasColumnType("numeric");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");

                            b1.OwnsOne("Loan.Domain.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("CustomerLoanApplicationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("ZipCode")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerLoanApplicationId");

                                    b2.ToTable("LoanApplications");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerLoanApplicationId");
                                });

                            b1.OwnsOne("Loan.Domain.Name", "Name", b2 =>
                                {
                                    b2.Property<Guid>("CustomerLoanApplicationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("First")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Last")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerLoanApplicationId");

                                    b2.ToTable("LoanApplications");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerLoanApplicationId");
                                });

                            b1.OwnsOne("Loan.Domain.Email", "Email", b2 =>
                                {
                                    b2.Property<Guid>("CustomerLoanApplicationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("MailValue")
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerLoanApplicationId");

                                    b2.ToTable("LoanApplications");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerLoanApplicationId");
                                });

                            b1.OwnsOne("Loan.Domain.NationalIdentifier", "NationalIdentifier", b2 =>
                                {
                                    b2.Property<Guid>("CustomerLoanApplicationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .HasColumnType("text");

                                    b2.HasKey("CustomerLoanApplicationId");

                                    b2.ToTable("LoanApplications");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomerLoanApplicationId");
                                });

                            b1.Navigation("Address");

                            b1.Navigation("Email");

                            b1.Navigation("Name");

                            b1.Navigation("NationalIdentifier");
                        });

                    b.OwnsOne("Loan.Domain.Decision", "Decision", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("DecisionBy")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("DecisionDate")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.OwnsOne("Loan.Domain.Loan", "Loan", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("InterestRate")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LoanAmount")
                                .HasColumnType("numeric");

                            b1.Property<int>("LoanNumberOfYears")
                                .HasColumnType("integer");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.OwnsOne("Loan.Domain.Property", "Property", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");

                            b1.OwnsOne("Loan.Domain.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("PropertyLoanApplicationId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("ZipCode")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("PropertyLoanApplicationId");

                                    b2.ToTable("LoanApplications");

                                    b2.WithOwner()
                                        .HasForeignKey("PropertyLoanApplicationId");
                                });

                            b1.Navigation("Address");
                        });

                    b.OwnsOne("Loan.Domain.Registration", "Registration", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("RegisteredBy")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("RegistrationDate")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.OwnsOne("Loan.Domain.ScoreResult", "Score", b1 =>
                        {
                            b1.Property<Guid>("LoanApplicationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Explanation")
                                .HasColumnType("text");

                            b1.Property<string>("Score")
                                .HasColumnType("text");

                            b1.HasKey("LoanApplicationId");

                            b1.ToTable("LoanApplications");

                            b1.WithOwner()
                                .HasForeignKey("LoanApplicationId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Decision");

                    b.Navigation("Loan");

                    b.Navigation("Property");

                    b.Navigation("Registration");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Loan.Domain.Operator", b =>
                {
                    b.OwnsOne("Loan.Domain.Money", "CompetenceLevel", b1 =>
                        {
                            b1.Property<Guid>("OperatorId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.HasKey("OperatorId");

                            b1.ToTable("Operators");

                            b1.WithOwner()
                                .HasForeignKey("OperatorId");
                        });

                    b.OwnsOne("Loan.Domain.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("OperatorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("First")
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Last")
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("OperatorId");

                            b1.ToTable("Operators");

                            b1.WithOwner()
                                .HasForeignKey("OperatorId");
                        });

                    b.Navigation("CompetenceLevel");

                    b.Navigation("Name");
                });
#pragma warning restore 612, 618
        }
    }
}
